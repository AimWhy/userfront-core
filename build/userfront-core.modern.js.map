{"version":3,"file":"userfront-core.modern.js","sources":["../src/constants.js","../src/index.js"],"sourcesContent":["export default {\n  apiUrl: `https://api.userfront.com/v0/`,\n  privateIPRegex: /((^127\\.)|(^10\\.)|(^172\\.1[6-9]\\.)|(^172\\.2[0-9]\\.)|(^172\\.3[0-1]\\.)|(^192\\.168\\.))\\d{1,3}\\.\\d{1,3}/g,\n};\n","import axios from \"axios\";\nimport Cookies from \"js-cookie\";\n// import jwt from \"jsonwebtoken\";\n\nimport constants from \"./constants\";\nconst { apiUrl, privateIPRegex } = constants;\n\n/**\n * Determine whether a hostname is in test mode.\n * @param {String} hn\n */\nconst isTestHostname = (hn) => {\n  try {\n    const hostname = hn || window.location.hostname;\n    return !!(hostname.match(/localhost/g) || hostname.match(privateIPRegex));\n  } catch (err) {\n    return true;\n  }\n};\n\nconst store = {\n  mode: isTestHostname() ? \"test\" : \"live\",\n};\n\n/**\n * Initialize the Userfront library.\n * @param {String} tenantId\n */\nfunction init(tenantId) {\n  if (!tenantId) return console.warn(\"Userfront initialized without tenant ID\");\n  store.tenantId = tenantId;\n  store.accessTokenName = `access.${tenantId}`;\n  store.idTokenName = `id.${tenantId}`;\n  store.refreshTokenName = `refresh.${tenantId}`;\n  setTokensFromCookies();\n}\n\n/**\n * Set and then return the access token\n */\nfunction accessToken() {\n  store.accessToken = Cookies.get(store.accessTokenName);\n  return store.accessToken;\n}\n\n/**\n * Set and then return the ID token\n */\nfunction idToken() {\n  store.idToken = Cookies.get(store.idTokenName);\n  return store.idToken;\n}\n\n/**\n * Get the value of a query attribute, e.g. ?attr=value\n * @param {String} attrName\n */\nfunction getQueryAttr(attrName) {\n  if (\n    !window.location.href ||\n    window.location.href.indexOf(`${attrName}=`) < 0\n  ) {\n    return;\n  }\n  return decodeURIComponent(\n    window.location.href.split(`${attrName}=`)[1].split(\"&\")[0]\n  );\n}\n\nfunction getProviderLink(provider) {\n  if (!provider) throw new Error(\"Missing provider\");\n  if (!store.tenantId) throw new Error(\"Missing tenant ID\");\n  return `https://api.userfront.com/v0/auth/${provider}/login?tenant_id=${store.tenantId}&origin=${window.location.origin}&pathname=${window.location.pathname}`;\n}\n\n/**\n * Define the mode of operation (live or test)\n */\nasync function setMode() {\n  try {\n    const { data } = await axios.get(`${apiUrl}tenants/${store.tenantId}/mode`);\n    store.mode = data.mode || \"test\";\n  } catch (err) {\n    store.mode = \"test\";\n  }\n}\n\n/**\n * Register a user via the provided method. This method serves to call other\n * methods, depending on the \"method\" parameter passed in.\n * @param {Object} options\n */\nasync function signup({ method, username, name, email, password }) {\n  if (!method) {\n    throw new Error('Userfront.signup called without \"method\" property');\n  }\n  switch (method) {\n    case \"azure\":\n    case \"facebook\":\n    case \"github\":\n    case \"google\":\n    case \"linkedin\":\n      return signupWithSSO(method);\n    case \"password\":\n      return signupWithPassword({ username, name, email, password });\n    default:\n      throw new Error('Userfront.signup called with invalid \"method\" property');\n  }\n}\n\n/**\n * Register a new user in via SSO provider.\n * Redirect the browser after successful authentication and 302 redirect from server.\n * @param {String} provider Name of SSO provider\n */\nfunction signupWithSSO(provider) {\n  if (!provider) throw new Error(\"Missing provider\");\n  const url = getProviderLink(provider);\n  window.location.assign(url);\n}\n\n/**\n * Register a new user with username, name, email, and password.\n * Redirect the browser after successful signup based on the redirectTo value returned.\n * @param {Object} options\n */\nasync function signupWithPassword({ username, name, email, password }) {\n  const { data } = await axios.post(`${apiUrl}auth/create`, {\n    tenantId: store.tenantId,\n    username,\n    name,\n    email,\n    password,\n  });\n\n  if (data.tokens) {\n    setCookiesAndTokens(data.tokens);\n    redirectToPath(getQueryAttr(\"redirect\") || data.redirectTo || \"/\");\n  } else {\n    throw new Error(\"Please try again.\");\n  }\n}\n\n/**\n * Log a user in via the provided method. This method serves to call other\n * methods, depending on the \"method\" parameter passed in.\n * @param {Object} options\n */\nasync function login({\n  method,\n  email,\n  username,\n  emailOrUsername,\n  password,\n  token,\n  uuid,\n}) {\n  if (!method) {\n    throw new Error('Userfront.login called without \"method\" property');\n  }\n  switch (method) {\n    case \"azure\":\n    case \"facebook\":\n    case \"github\":\n    case \"google\":\n    case \"linkedin\":\n      return loginWithSSO(method);\n    case \"password\":\n      return loginWithPassword({ email, username, emailOrUsername, password });\n    case \"link\":\n      return loginWithLink(token, uuid);\n    default:\n      throw new Error('Userfront.login called with invalid \"method\" property');\n  }\n}\n\n/**\n * Log a user in via SSO provider.\n * Redirect the browser after successful authentication and 302 redirect from server.\n * @param {String} provider Name of SSO provider\n */\nfunction loginWithSSO(provider) {\n  if (!provider) throw new Error(\"Missing provider\");\n  const url = getProviderLink(provider);\n  window.location.assign(url);\n}\n\n/**\n * Log a user in with email/username and password.\n * Redirect the browser after successful login based on the redirectTo value returned.\n * @param {Object} options\n */\nasync function loginWithPassword({\n  email,\n  username,\n  emailOrUsername,\n  password,\n}) {\n  const { data } = await axios.post(`${apiUrl}auth/basic`, {\n    tenantId: store.tenantId,\n    emailOrUsername: email || username || emailOrUsername,\n    password,\n  });\n  if (data.tokens) {\n    setCookiesAndTokens(data.tokens);\n    redirectToPath(getQueryAttr(\"redirect\") || data.redirectTo || \"/\");\n  } else {\n    throw new Error(\"Please try again.\");\n  }\n}\n\n/**\n * Log a user in with a token/uuid combo passed into the function or\n * in the URL querystring. ?token=...&uuid=...\n * @param {String} token\n * @param {UUID} uuid\n */\nasync function loginWithLink(token, uuid) {\n  if (!token) token = getQueryAttr(\"token\");\n  if (!uuid) uuid = getQueryAttr(\"uuid\");\n  if (!token || !uuid) return;\n\n  const { data } = await axios.put(`${apiUrl}auth/link`, {\n    token,\n    uuid,\n    tenantId: store.tenantId,\n  });\n\n  if (data.tokens) {\n    setCookiesAndTokens(data.tokens);\n    redirectToPath(getQueryAttr(\"redirect\") || data.redirectTo || \"/\");\n  } else {\n    throw new Error(\"Problem logging in.\");\n  }\n}\n\n/**\n * Send a login link to the provided email.\n * @param {String} email\n */\nasync function sendLoginLink(email) {\n  try {\n    const { data } = await axios.post(`${apiUrl}auth/link`, {\n      email,\n      tenantId: store.tenantId,\n    });\n    return data;\n  } catch (err) {\n    throw new Error(\"Problem sending link\");\n  }\n}\n\n/**\n * Send a password reset link to the provided email.\n * @param {String} email\n */\nasync function sendResetLink(email) {\n  try {\n    const { data } = await axios.post(`${apiUrl}auth/reset/link`, {\n      email,\n      tenantId: store.tenantId,\n    });\n    return data;\n  } catch (err) {\n    throw new Error(\"Problem sending link\");\n  }\n}\n\nasync function resetPassword({ uuid, token, password }) {\n  if (!token) token = getQueryAttr(\"token\");\n  if (!uuid) uuid = getQueryAttr(\"uuid\");\n  if (!token || !uuid) throw new Error(\"Missing token or uuid\");\n  const { data } = await axios.put(`${apiUrl}auth/reset`, {\n    tenantId: store.tenantId,\n    uuid,\n    token,\n    password,\n  });\n  if (data.tokens) {\n    setCookiesAndTokens(data.tokens);\n    redirectToPath(getQueryAttr(\"redirect\") || data.redirectTo || \"/\");\n  } else {\n    throw new Error(\n      \"There was a problem resetting your password. Please try again.\"\n    );\n  }\n}\n\n// TODO replace with direct check of the access token.\n/**\n * If the access token is valid, redirect the browser to the\n * tenant's login redirection path (path after login).\n */\nasync function redirectIfLoggedIn() {\n  if (!store.accessToken) return removeAllCookies();\n  try {\n    const { data } = await axios.get(`${apiUrl}self`, {\n      headers: {\n        authorization: `Bearer ${store.accessToken}`,\n      },\n    });\n    if (data.tenant && data.tenant.loginRedirectPath) {\n      redirectToPath(data.tenant.loginRedirectPath);\n    }\n  } catch (err) {\n    removeAllCookies();\n  }\n}\n\n/**\n * Redirect to path portion of a URL.\n */\nfunction redirectToPath(pathOrUrl) {\n  if (!pathOrUrl) return;\n  const el = document.createElement(\"a\");\n  el.href = pathOrUrl;\n  let path = `${el.pathname}${el.hash}${el.search}`;\n  if (el.pathname !== window.location.pathname) {\n    window.location.href = path;\n  }\n}\n\n/**\n * Log a user out and redirect to the logout path.\n */\nasync function logout() {\n  if (!store.accessToken) return removeAllCookies();\n  try {\n    const { data } = await axios.get(`${apiUrl}auth/logout`, {\n      headers: {\n        authorization: `Bearer ${store.accessToken}`,\n      },\n    });\n    removeAllCookies();\n    redirectToPath(data.redirectTo);\n  } catch (err) {}\n}\n\n/**\n * Set a cookie value based on the given options.\n * @param {String} value\n * @param {Object} options\n * @param {String} type\n */\nfunction setCookie(value, options, type) {\n  const cookieName = `${type}.${store.tenantId}`;\n  options = options || {\n    secure: store.mode === \"live\",\n    sameSite: \"Lax\",\n  };\n  if (type === \"refresh\") {\n    options.sameSite = \"Strict\";\n  }\n  Cookies.set(cookieName, value, options);\n}\n\n/**\n * Remove a cookie by name, regardless of its cookie setting(s).\n * @param {String} name\n */\nfunction removeCookie(name) {\n  Cookies.remove(name);\n  Cookies.remove(name, { secure: true, sameSite: \"Lax\" });\n  Cookies.remove(name, { secure: true, sameSite: \"None\" });\n  Cookies.remove(name, { secure: false, sameSite: \"Lax\" });\n  Cookies.remove(name, { secure: false, sameSite: \"None\" });\n}\n\n/**\n * Remove all auth cookies (access, id, refresh).\n */\nfunction removeAllCookies() {\n  removeCookie(store.accessTokenName);\n  removeCookie(store.idTokenName);\n  removeCookie(store.refreshTokenName);\n  store.accessToken = undefined;\n  store.idToken = undefined;\n  store.refreshToken = undefined;\n}\n\n/**\n * Define the store token values from the cookie values.\n */\nfunction setTokensFromCookies() {\n  store.accessToken = Cookies.get(store.accessTokenName);\n  store.idToken = Cookies.get(store.idTokenName);\n  store.refreshToken = Cookies.get(store.refreshTokenName);\n}\n\n/**\n * Set the cookies from a tokens object, and add to the local store.\n * @param {Object} tokens\n */\nfunction setCookiesAndTokens(tokens) {\n  setCookie(tokens.access.value, tokens.access.cookieOptions, \"access\");\n  setCookie(tokens.id.value, tokens.id.cookieOptions, \"id\");\n  setCookie(tokens.refresh.value, tokens.refresh.cookieOptions, \"refresh\");\n  setTokensFromCookies();\n}\n\n/**\n * Register a window-level event called \"urlchanged\" that will fire\n * whenever the browser URL changes.\n */\nlet isRegistered = false;\nfunction registerUrlChangedEventListener() {\n  if (isRegistered) return;\n  isRegistered = true;\n  try {\n    history.pushState = ((f) =>\n      function pushState() {\n        var ret = f.apply(this, arguments);\n        window.dispatchEvent(new Event(\"pushstate\"));\n        window.dispatchEvent(new Event(\"urlchanged\"));\n        return ret;\n      })(history.pushState);\n\n    history.replaceState = ((f) =>\n      function replaceState() {\n        var ret = f.apply(this, arguments);\n        window.dispatchEvent(new Event(\"replacestate\"));\n        window.dispatchEvent(new Event(\"urlchanged\"));\n        return ret;\n      })(history.replaceState);\n\n    window.addEventListener(\"popstate\", () => {\n      window.dispatchEvent(new Event(\"urlchanged\"));\n    });\n  } catch (error) {}\n}\n\nexport default {\n  accessToken,\n  getQueryAttr,\n  idToken,\n  init,\n  isTestHostname,\n  login,\n  logout,\n  redirectIfLoggedIn,\n  registerUrlChangedEventListener,\n  resetPassword,\n  sendLoginLink,\n  sendResetLink,\n  setMode,\n  setCookie,\n  signup,\n  store,\n};\n"],"names":["apiUrl","privateIPRegex","isTestHostname","hn","hostname","window","location","match","err","store","mode","_get__","init","tenantId","console","warn","accessTokenName","idTokenName","refreshTokenName","accessToken","get","idToken","getQueryAttr","attrName","href","indexOf","decodeURIComponent","split","getProviderLink","provider","Error","origin","pathname","async","setMode","data","signup","method","username","name","email","password","signupWithSSO","url","assign","signupWithPassword","post","tokens","redirectTo","login","emailOrUsername","token","uuid","loginWithSSO","loginWithPassword","loginWithLink","put","sendLoginLink","sendResetLink","resetPassword","redirectIfLoggedIn","headers","authorization","tenant","loginRedirectPath","redirectToPath","pathOrUrl","el","document","createElement","hash","search","logout","setCookie","value","options","type","cookieName","secure","sameSite","set","removeCookie","remove","removeAllCookies","undefined","refreshToken","setTokensFromCookies","setCookiesAndTokens","access","cookieOptions","id","refresh","isRegistered","registerUrlChangedEventListener","_assign__","history","pushState","f","ret","apply","this","arguments","dispatchEvent","Event","replaceState","addEventListener","error"],"mappings":"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"}