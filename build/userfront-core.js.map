{"version":3,"file":"userfront-core.js","sources":["../src/index.js","../src/constants.js"],"sourcesContent":["import axios from \"axios\";\nimport Cookies from \"js-cookie\";\n// import jwt from \"jsonwebtoken\";\n\nimport constants from \"./constants\";\nconst { apiUrl, privateIPRegex } = constants;\n\n/**\n * Determine whether a hostname is in test mode.\n * @param {String} hn\n */\nconst isTestHostname = (hn) => {\n  try {\n    const hostname = hn || window.location.hostname;\n    return !!(hostname.match(/localhost/g) || hostname.match(privateIPRegex));\n  } catch (err) {\n    return true;\n  }\n};\n\nconst store = {\n  mode: isTestHostname() ? \"test\" : \"live\",\n};\n\n/**\n * Initialize the Userfront library.\n * @param {String} tenantId\n */\nfunction init(tenantId) {\n  if (!tenantId) return console.warn(\"Userfront initialized without tenant ID\");\n  store.tenantId = tenantId;\n  store.accessTokenName = `access.${tenantId}`;\n  store.idTokenName = `id.${tenantId}`;\n  store.refreshTokenName = `refresh.${tenantId}`;\n  setTokensFromCookies();\n}\n\n/**\n * Get the value of a query attribute, e.g. ?attr=value\n * @param {String} attrName\n */\nfunction getQueryAttr(attrName) {\n  if (\n    !window.location.href ||\n    window.location.href.indexOf(`${attrName}=`) < 0\n  ) {\n    return;\n  }\n  return decodeURIComponent(\n    window.location.href.split(`${attrName}=`)[1].split(\"&\")[0]\n  );\n}\n\n/**\n * Define the mode of operation (live or test)\n */\nasync function setMode() {\n  try {\n    const { data } = await axios.get(`${apiUrl}tenants/${store.tenantId}/mode`);\n    store.mode = data.mode || \"test\";\n  } catch (err) {\n    store.mode = \"test\";\n  }\n}\n\n/**\n * Register a new user with username, name, email, and password.\n * Redirect the browser after successful signup based on the redirectTo value returned.\n * @param {*} param0\n */\nasync function signup({ username, name, email, password }) {\n  const { data } = await axios.post(`${apiUrl}auth/create`, {\n    tenantId: store.tenantId,\n    username,\n    name,\n    email,\n    password,\n  });\n\n  if (data.tokens) {\n    setCookiesAndTokens(data.tokens);\n    redirectToPath(getQueryAttr(\"redirect\") || data.redirectTo || \"/\");\n  } else {\n    throw new Error(\"Please try again.\");\n  }\n}\n\n/**\n * Log a user in with email/username and password.\n * Redirect the browser after successful login based on the redirectTo value returned.\n * @param {*} param0\n */\nasync function login({ email, username, emailOrUsername, password }) {\n  const { data } = await axios.post(`${apiUrl}auth/basic`, {\n    tenantId: store.tenantId,\n    emailOrUsername: email || username || emailOrUsername,\n    password,\n  });\n  if (data.tokens) {\n    setCookiesAndTokens(data.tokens);\n    redirectToPath(getQueryAttr(\"redirect\") || data.redirectTo || \"/\");\n  } else {\n    throw new Error(\"Please try again.\");\n  }\n}\n\n/**\n * Log a user in with a token/uuid combo passed into the function or\n * in the URL querystring. ?token=...&uuid=...\n * @param {String} token\n * @param {UUID} uuid\n */\nasync function loginWithTokenAndUuid(token, uuid) {\n  if (!token) token = getQueryAttr(\"token\");\n  if (!uuid) uuid = getQueryAttr(\"uuid\");\n  if (!token || !uuid) return;\n\n  const { data } = await axios.put(`${apiUrl}auth/link`, {\n    token,\n    uuid,\n    tenantId: store.tenantId,\n  });\n\n  if (data.tokens) {\n    setCookiesAndTokens(data.tokens);\n    redirectToPath(getQueryAttr(\"redirect\") || data.redirectTo || \"/\");\n  } else {\n    throw new Error(\"Problem logging in.\");\n  }\n}\n\n/**\n * Send a login link to the provided email.\n * @param {String} email\n */\nasync function sendLoginLink(email) {\n  try {\n    const { data } = await axios.post(`${apiUrl}auth/link`, {\n      email,\n      tenantId: store.tenantId,\n    });\n    return data;\n  } catch (err) {\n    throw new Error(\"Problem sending link\");\n  }\n}\n\n/**\n * Send a password reset link to the provided email.\n * @param {String} email\n */\nasync function sendResetLink(email) {\n  try {\n    const { data } = await axios.post(`${apiUrl}auth/reset/link`, {\n      email,\n      tenantId: store.tenantId,\n    });\n    return data;\n  } catch (err) {\n    throw new Error(\"Problem sending link\");\n  }\n}\n\nasync function resetPassword({ uuid, token, password }) {\n  if (!token) token = getQueryAttr(\"token\");\n  if (!uuid) uuid = getQueryAttr(\"uuid\");\n  if (!token || !uuid) throw new Error(\"Missing token or uuid\");\n  const { data } = await axios.put(`${apiUrl}auth/reset`, {\n    tenantId: store.tenantId,\n    uuid,\n    token,\n    password,\n  });\n  if (data.tokens) {\n    setCookiesAndTokens(data.tokens);\n    redirectToPath(getQueryAttr(\"redirect\") || data.redirectTo || \"/\");\n  } else {\n    throw new Error(\n      \"There was a problem resetting your password. Please try again.\"\n    );\n  }\n}\n\n// TODO replace with direct check of the access token.\n/**\n * If the access token is valid, redirect the browser to the\n * tenant's login redirection path (path after login).\n */\nasync function redirectIfLoggedIn() {\n  if (!store.accessToken) return removeAllCookies();\n  try {\n    const { data } = await axios.get(`${apiUrl}self`, {\n      headers: {\n        authorization: `Bearer ${store.accessToken}`,\n      },\n    });\n    if (data.tenant && data.tenant.loginRedirectPath) {\n      redirectToPath(data.tenant.loginRedirectPath);\n    }\n  } catch (err) {\n    removeAllCookies();\n  }\n}\n\n/**\n * Redirect to path portion of a URL.\n */\nfunction redirectToPath(pathOrUrl) {\n  if (!pathOrUrl) return;\n  const el = document.createElement(\"a\");\n  el.href = pathOrUrl;\n  let path = `${el.pathname}${el.hash}${el.search}`;\n  if (el.pathname !== window.location.pathname) {\n    window.location.href = path;\n  }\n}\n\n/**\n * Log a user out and redirect to the logout path.\n */\nasync function logout() {\n  if (!store.accessToken) return removeAllCookies();\n  try {\n    const { data } = await axios.get(`${apiUrl}auth/logout`, {\n      headers: {\n        authorization: `Bearer ${store.accessToken}`,\n      },\n    });\n    removeAllCookies();\n    redirectToPath(data.redirectTo);\n  } catch (err) {}\n}\n\n/**\n * Set a cookie value based on the given options.\n * @param {String} value\n * @param {Object} options\n * @param {String} type\n */\nfunction setCookie(value, options, type) {\n  const cookieName = `${type}.${store.tenantId}`;\n  options = options || {\n    secure: store.mode === \"live\",\n    sameSite: \"Lax\",\n  };\n  if (type === \"refresh\") {\n    options.sameSite = \"Strict\";\n  }\n  Cookies.set(cookieName, value, options);\n}\n\n/**\n * Remove a cookie by name, regardless of its cookie setting(s).\n * @param {String} name\n */\nfunction removeCookie(name) {\n  Cookies.remove(name);\n  Cookies.remove(name, { secure: true, sameSite: \"Lax\" });\n  Cookies.remove(name, { secure: true, sameSite: \"None\" });\n  Cookies.remove(name, { secure: false, sameSite: \"Lax\" });\n  Cookies.remove(name, { secure: false, sameSite: \"None\" });\n}\n\n/**\n * Remove all auth cookies (access, id, refresh).\n */\nfunction removeAllCookies() {\n  removeCookie(store.accessTokenName);\n  removeCookie(store.idTokenName);\n  removeCookie(store.refreshTokenName);\n  store.accessToken = undefined;\n  store.idToken = undefined;\n  store.refreshToken = undefined;\n}\n\n/**\n * Define the store token values from the cookie values.\n */\nfunction setTokensFromCookies() {\n  store.accessToken = Cookies.get(store.accessTokenName);\n  store.idToken = Cookies.get(store.idTokenName);\n  store.refreshToken = Cookies.get(store.refreshTokenName);\n}\n\n/**\n * Set the cookies from a tokens object, and add to the local store.\n * @param {Object} tokens\n */\nfunction setCookiesAndTokens(tokens) {\n  setCookie(tokens.access.value, tokens.access.cookieOptions, \"access\");\n  setCookie(tokens.id.value, tokens.id.cookieOptions, \"id\");\n  setCookie(tokens.refresh.value, tokens.refresh.cookieOptions, \"refresh\");\n  setTokensFromCookies();\n}\n\nexport default {\n  getQueryAttr,\n  init,\n  isTestHostname,\n  login,\n  loginWithTokenAndUuid,\n  logout,\n  redirectIfLoggedIn,\n  resetPassword,\n  sendLoginLink,\n  sendResetLink,\n  setMode,\n  setCookie,\n  signup,\n  store,\n};\n","export default {\n  apiUrl: `https://api.userfront.com/v0/`,\n  privateIPRegex: /((^127\\.)|(^10\\.)|(^172\\.1[6-9]\\.)|(^172\\.2[0-9]\\.)|(^172\\.3[0-1]\\.)|(^192\\.168\\.))\\d{1,3}\\.\\d{1,3}/g,\n};\n"],"names":["_catch","body","recover","result","e","then","apiUrl","privateIPRegex","isTestHostname","hn","hostname","window","location","match","err","store","mode","getQueryAttr","attrName","href","indexOf","decodeURIComponent","split","redirectToPath","pathOrUrl","el","document","createElement","pathname","hash","search","setCookie","value","options","type","cookieName","tenantId","secure","sameSite","Cookies","set","removeCookie","name","remove","removeAllCookies","accessTokenName","idTokenName","refreshTokenName","accessToken","undefined","idToken","refreshToken","setTokensFromCookies","get","setCookiesAndTokens","tokens","access","cookieOptions","id","refresh","init","console","warn","login","email","username","emailOrUsername","password","axios","post","data","Error","redirectTo","loginWithTokenAndUuid","token","uuid","put","logout","headers","authorization","redirectIfLoggedIn","tenant","loginRedirectPath","resetPassword","sendLoginLink","sendResetLink","setMode","signup"],"mappings":"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"}